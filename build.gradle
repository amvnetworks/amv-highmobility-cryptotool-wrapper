import io.franzbecker.gradle.lombok.task.DelombokTask
import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

buildscript {
    repositories {
        jcenter()
    }
}

plugins {
    id 'nebula.project' version '3.4.0'
    id 'nebula.info' version '3.6.0'
    id 'nebula.release' version '6.0.0'
    id 'nebula.lint' version '6.8.0'
    id 'com.github.spotbugs' version '1.6.5'
    id 'checkstyle'
    id 'com.jfrog.bintray' version '1.7.3'
    id 'io.franzbecker.gradle-lombok' version '1.14'
    id 'com.github.ben-manes.versions' version '0.14.0'
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'com.github.spotbugs'
apply plugin: 'checkstyle'
apply plugin: 'jacoco'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'io.franzbecker.gradle-lombok'

group = 'org.amv.highmobility'
description = 'A Java wrapper for highmobility cryptotool'

sourceCompatibility = 1.8
targetCompatibility = 1.8

gradle.taskGraph.whenReady { graph ->
    def isMinimalBuild = project.hasProperty("minimal")

    def enableAdditionalLongRunningTasks = !isMinimalBuild

    if (!enableAdditionalLongRunningTasks) {
        spotbugsMain.enabled = false
        checkstyleMain.enabled = false
        javadoc.enabled = false
        delombok.enabled = false
    }
}

contacts {
    'devlopment@amv-networks.com' {
        moniker 'AMV Networks GmbH'
        role 'owner'
        github 'amvnetworks'
    }
}

repositories {
    jcenter()
}

dependencies {
    spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.8.0'

    compile 'org.slf4j:slf4j-api:1.7.25'
    compile 'com.google.guava:guava:21.0'
    compile 'org.apache.commons:commons-lang3:3.5'
    compile 'commons-io:commons-io:2.5'
    compile 'commons-codec:commons-codec:1.10'
    compile 'io.projectreactor:reactor-core:3.1.0.RELEASE'

    compileOnly 'org.projectlombok:lombok:1.18.4'

    testCompile 'org.slf4j:slf4j-simple:1.7.25'

    testCompile 'junit:junit:4.12'
    testCompile 'org.hamcrest:hamcrest-all:1.3'
    testCompile 'pl.pragmatists:JUnitParams:1.1.0'
}

lombok {
    version = '1.18.4'
    sha256 '39f3922deb679b1852af519eb227157ef2dd0a21eec3542c8ce1b45f2df39742'
}

task delombok(type: DelombokTask, dependsOn: compileJava) {
    ext.outputDir = file("$buildDir/delombok")
    outputs.dir(outputDir)
    sourceSets.main.java.srcDirs.each {
        inputs.dir(it)
        args(it, '-d', outputDir)
    }
}

task delombokHelp(type: DelombokTask) {
    args '--help'
}

javadoc {
    dependsOn delombok
    source = delombok.outputDir
    exclude 'lombok.config'
    failOnError = false
}

checkstyle {
    configFile = rootProject.file('config/checkstyle/checkstyle.xml')
    toolVersion = '6.7'
    ignoreFailures = true
    showViolations = false
    sourceSets = [sourceSets.main]
    reportsDir = rootProject.file("$buildDir/reports/checkstyle")
}

spotbugs  {
    toolVersion = '3.1.11'
    effort = 'min'
    showProgress = true
    ignoreFailures = true
    sourceSets = [sourceSets.main]
}

tasks.withType(com.github.spotbugs.SpotBugsTask) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

jar.doFirst {
    // other manifest attributes will be populated by nebula.info plugin
    // see https://github.com/nebula-plugins/gradle-info-plugin
    def vendor = 'AMV Networks GmbH'
    manifest {
        attributes(
                'Specification-Title': project.description,
                'Specification-Version': project.version,
                'Specification-Vendor': vendor,
                'Implementation-Vendor': vendor
        )
    }
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

artifacts {
    archives javadocJar, sourcesJar
}

if (project.hasProperty('releaseToBintray')) {
    if (rootProject.version.toString().contains('SNAPSHOT')) {
        throw new GradleException('-PreleaseToBintray param cannot be used with SNAPSHOT versions')
    }

    bintray {
        user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
        key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
        configurations = ['archives']
        pkg {
            repo = 'amv-highmobility-cryptotool-wrapper'
            name = project.name
            userOrg = user
            licenses = ['MIT']
            vcsUrl = 'https://github.com/amvnetworks/amv-highmobility-cryptotool-wrapper.git'
            labels = ['amv', 'highmobility', 'cryptotool']
            publicDownloadNumbers = false
            version {
                name = rootProject.version
                desc = project.description
                vcsTag = rootProject.version
            }
        }
    }
}

test {
    // Generate code coverage reports ... run with jacoco
    jacocoTestReport{
        additionalSourceDirs = files(sourceSets.main.allJava.srcDirs)
        reports {
            xml.enabled true
            csv.enabled false
            html.destination file("${buildDir}/reports/jacoco/html")
        }
        executionData = files("${buildDir}/jacoco/test.exec")
    }

    // * enable on demand
    // testLogging.showStandardStreams = true
    finalizedBy jacocoTestReport
}

tasks.withType(Test) {
    testLogging {
        // set options for log level LIFECYCLE: STARTED, PASSED, SKIPPED, FAILED
        events TestLogEvent.PASSED, TestLogEvent.SKIPPED, TestLogEvent.FAILED
        showExceptions true
        exceptionFormat TestExceptionFormat.FULL
        showCauses true
        showStackTraces true

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}